//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Inputs/BoxosInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Inputs/BoxosInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @BoxosInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @BoxosInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BoxosInputActions"",
    ""maps"": [
        {
            ""name"": ""Boxe"",
            ""id"": ""5a297892-9e21-4ac7-b1e5-1238fd6c2828"",
            ""actions"": [
                {
                    ""name"": ""Left Arm"",
                    ""type"": ""Value"",
                    ""id"": ""bf00af48-e7b4-4a54-8ea6-cd6fb232403a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel Left"",
                    ""type"": ""Button"",
                    ""id"": ""a4a224d2-1bc7-494b-af11-c5c747f2c24c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Arm"",
                    ""type"": ""Value"",
                    ""id"": ""35e5fdff-0669-455a-9885-db4fda206f48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel Right"",
                    ""type"": ""Button"",
                    ""id"": ""e618f310-a1fb-4940-b7fb-305d2726eab6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c998435d-8ec2-4a9b-87bd-efe3ed31dc27"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""606dc6e9-2235-40e9-9a55-16e1b4c0a7a5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b94749b0-d82f-43dc-9446-9b4fd2fe655a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d9080dad-4dfc-4ce3-a6c4-93c366bd71c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34f84cf0-f5bf-440a-be36-5223bf9114d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a65adad1-c5bf-490f-bea4-54fb0f7d560c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8fa94a4d-6430-488c-b58b-f91113a3fe5e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""626e8f36-4eb9-48f9-9c1f-8a391fc7c497"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""28aa7ebc-f405-42b8-a10d-2eb59d6ccf59"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""70430b76-dbb3-4002-814a-e735e31e1bf1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""689eb7eb-ad33-4f1d-89e6-0aae7acfbc57"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f74ebdc6-5cff-4253-8548-66c0407b3fd5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""41c2f8f6-0828-4db8-b9a3-9a7f819bc4d0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91083ca5-b5f4-45be-9406-2331791648c4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa151444-fb77-4364-9267-0668fdd19107"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0f8939e-131e-44f9-bcb5-e8f0141d1708"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Chiasse"",
            ""bindingGroup"": ""Chiasse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Boxe
        m_Boxe = asset.FindActionMap("Boxe", throwIfNotFound: true);
        m_Boxe_LeftArm = m_Boxe.FindAction("Left Arm", throwIfNotFound: true);
        m_Boxe_CancelLeft = m_Boxe.FindAction("Cancel Left", throwIfNotFound: true);
        m_Boxe_RightArm = m_Boxe.FindAction("Right Arm", throwIfNotFound: true);
        m_Boxe_CancelRight = m_Boxe.FindAction("Cancel Right", throwIfNotFound: true);
    }

    ~@BoxosInputActions()
    {
        UnityEngine.Debug.Assert(!m_Boxe.enabled, "This will cause a leak and performance issues, BoxosInputActions.Boxe.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Boxe
    private readonly InputActionMap m_Boxe;
    private List<IBoxeActions> m_BoxeActionsCallbackInterfaces = new List<IBoxeActions>();
    private readonly InputAction m_Boxe_LeftArm;
    private readonly InputAction m_Boxe_CancelLeft;
    private readonly InputAction m_Boxe_RightArm;
    private readonly InputAction m_Boxe_CancelRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "Boxe".
    /// </summary>
    public struct BoxeActions
    {
        private @BoxosInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public BoxeActions(@BoxosInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Boxe/LeftArm".
        /// </summary>
        public InputAction @LeftArm => m_Wrapper.m_Boxe_LeftArm;
        /// <summary>
        /// Provides access to the underlying input action "Boxe/CancelLeft".
        /// </summary>
        public InputAction @CancelLeft => m_Wrapper.m_Boxe_CancelLeft;
        /// <summary>
        /// Provides access to the underlying input action "Boxe/RightArm".
        /// </summary>
        public InputAction @RightArm => m_Wrapper.m_Boxe_RightArm;
        /// <summary>
        /// Provides access to the underlying input action "Boxe/CancelRight".
        /// </summary>
        public InputAction @CancelRight => m_Wrapper.m_Boxe_CancelRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Boxe; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="BoxeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(BoxeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="BoxeActions" />
        public void AddCallbacks(IBoxeActions instance)
        {
            if (instance == null || m_Wrapper.m_BoxeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoxeActionsCallbackInterfaces.Add(instance);
            @LeftArm.started += instance.OnLeftArm;
            @LeftArm.performed += instance.OnLeftArm;
            @LeftArm.canceled += instance.OnLeftArm;
            @CancelLeft.started += instance.OnCancelLeft;
            @CancelLeft.performed += instance.OnCancelLeft;
            @CancelLeft.canceled += instance.OnCancelLeft;
            @RightArm.started += instance.OnRightArm;
            @RightArm.performed += instance.OnRightArm;
            @RightArm.canceled += instance.OnRightArm;
            @CancelRight.started += instance.OnCancelRight;
            @CancelRight.performed += instance.OnCancelRight;
            @CancelRight.canceled += instance.OnCancelRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="BoxeActions" />
        private void UnregisterCallbacks(IBoxeActions instance)
        {
            @LeftArm.started -= instance.OnLeftArm;
            @LeftArm.performed -= instance.OnLeftArm;
            @LeftArm.canceled -= instance.OnLeftArm;
            @CancelLeft.started -= instance.OnCancelLeft;
            @CancelLeft.performed -= instance.OnCancelLeft;
            @CancelLeft.canceled -= instance.OnCancelLeft;
            @RightArm.started -= instance.OnRightArm;
            @RightArm.performed -= instance.OnRightArm;
            @RightArm.canceled -= instance.OnRightArm;
            @CancelRight.started -= instance.OnCancelRight;
            @CancelRight.performed -= instance.OnCancelRight;
            @CancelRight.canceled -= instance.OnCancelRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BoxeActions.UnregisterCallbacks(IBoxeActions)" />.
        /// </summary>
        /// <seealso cref="BoxeActions.UnregisterCallbacks(IBoxeActions)" />
        public void RemoveCallbacks(IBoxeActions instance)
        {
            if (m_Wrapper.m_BoxeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="BoxeActions.AddCallbacks(IBoxeActions)" />
        /// <seealso cref="BoxeActions.RemoveCallbacks(IBoxeActions)" />
        /// <seealso cref="BoxeActions.UnregisterCallbacks(IBoxeActions)" />
        public void SetCallbacks(IBoxeActions instance)
        {
            foreach (var item in m_Wrapper.m_BoxeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoxeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="BoxeActions" /> instance referencing this action map.
    /// </summary>
    public BoxeActions @Boxe => new BoxeActions(this);
    private int m_ChiasseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme ChiasseScheme
    {
        get
        {
            if (m_ChiasseSchemeIndex == -1) m_ChiasseSchemeIndex = asset.FindControlSchemeIndex("Chiasse");
            return asset.controlSchemes[m_ChiasseSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Boxe" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="BoxeActions.AddCallbacks(IBoxeActions)" />
    /// <seealso cref="BoxeActions.RemoveCallbacks(IBoxeActions)" />
    public interface IBoxeActions
    {
        /// <summary>
        /// Method invoked when associated input action "Left Arm" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftArm(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right Arm" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightArm(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelRight(InputAction.CallbackContext context);
    }
}
